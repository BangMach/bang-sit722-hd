#!/bin/bash

# Vulnerability Monitoring Script
# This script performs comprehensive vulnerability scanning for the deployed services

set -e

# Configuration
ACR_LOGIN_SERVER=${ACR_LOGIN_SERVER:-"bangacr.azurecr.io"}
RESOURCE_GROUP="bang-resource-group"
AKS_CLUSTER_NAME="bang-aks-cluster"

echo "🔍 Starting vulnerability monitoring scan..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check vulnerabilities
check_vulnerabilities() {
    local service=$1
    local image_tag=${2:-"latest"}

    echo "🔎 Scanning $service:$image_tag for vulnerabilities..."

    # Pull image
    docker pull $ACR_LOGIN_SERVER/$service:$image_tag

    # Scan with Trivy
    echo "Running Trivy scan..."
    trivy_output=$(docker run --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy:latest image \
        --exit-code 0 \
        --format json \
        $ACR_LOGIN_SERVER/$service:$image_tag)

    # Parse results
    critical_count=$(echo $trivy_output | jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL") | .VulnerabilityID' | wc -l)
    high_count=$(echo $trivy_output | jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH") | .VulnerabilityID' | wc -l)
    medium_count=$(echo $trivy_output | jq '.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM") | .VulnerabilityID' | wc -l)

    echo "📊 Vulnerability Summary for $service:"
    echo "  Critical: $critical_count"
    echo "  High: $high_count"
    echo "  Medium: $medium_count"

    # Alert on critical vulnerabilities
    if [ "$critical_count" -gt 0 ]; then
        echo -e "${RED}🚨 CRITICAL VULNERABILITIES FOUND in $service!${NC}"
        echo "$trivy_output" | jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL") | {ID: .VulnerabilityID, Severity: .Severity, Package: .PkgName, Title: .Title}'
    fi

    if [ "$high_count" -gt 0 ]; then
        echo -e "${YELLOW}⚠️ HIGH VULNERABILITIES FOUND in $service${NC}"
    fi
}

# Function to check running containers
check_running_containers() {
    echo "🔍 Checking running containers in AKS..."

    # Get kubectl context
    kubectl config use-context $AKS_CLUSTER_NAME

    # Get all pods and their images
    kubectl get pods -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[*].image}{"\n"}{end}' | while IFS=$'\t' read -r pod_name images; do
        echo "Pod: $pod_name"
        echo "Images: $images"
        echo "---"
    done
}

# Function to check Azure Security Center recommendations
check_azure_security() {
    echo "🔒 Checking Azure Security Center recommendations..."

    # Get security recommendations
    az security assessment list \
        --resource-group $RESOURCE_GROUP \
        --query '[].{Name:name, Status:status.code, Severity:metadata.severity}' \
        -o table
}

# Function to generate security report
generate_report() {
    local report_file="security-report-$(date +%Y%m%d-%H%M%S).txt"

    echo "📝 Generating security report: $report_file"

    {
        echo "=== Security Vulnerability Report ==="
        echo "Generated: $(date)"
        echo ""
        echo "=== Container Image Scans ==="
        check_vulnerabilities "product-service"
        check_vulnerabilities "order-service"
        check_vulnerabilities "customer-service"
        check_vulnerabilities "frontend"
        echo ""
        echo "=== Running Containers ==="
        check_running_containers
        echo ""
        echo "=== Azure Security Recommendations ==="
        check_azure_security
        echo ""
        echo "=== Recommendations ==="
        echo "1. Address all CRITICAL and HIGH severity vulnerabilities immediately"
        echo "2. Keep base images updated regularly"
        echo "3. Implement proper secrets management"
        echo "4. Regular security scans (weekly recommended)"
        echo "5. Monitor Azure Security Center alerts"
    } > $report_file

    echo "✅ Report saved to: $report_file"
}

# Main execution
case "${1:-all}" in
    "images")
        check_vulnerabilities "product-service"
        check_vulnerabilities "order-service"
        check_vulnerabilities "customer-service"
        check_vulnerabilities "frontend"
        ;;
    "containers")
        check_running_containers
        ;;
    "azure")
        check_azure_security
        ;;
    "report")
        generate_report
        ;;
    "all")
        check_vulnerabilities "product-service"
        check_vulnerabilities "order-service"
        check_vulnerabilities "customer-service"
        check_vulnerabilities "frontend"
        check_running_containers
        check_azure_security
        generate_report
        ;;
    *)
        echo "Usage: $0 [images|containers|azure|report|all]"
        exit 1
        ;;
esac

echo "✅ Vulnerability monitoring complete!"