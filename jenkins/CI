pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'testing', description: 'Branch to build')
        string(name: 'AWS_REGION', defaultValue: 'ap-southeast-2', description: 'AWS Region')
        string(name: 'DOCKER_REGISTRY', defaultValue: 'your-registry.com', description: 'Docker Registry URL')
    }
    
    environment {
        // Docker and AWS credentials
        DOCKER_REGISTRY = "${params.DOCKER_REGISTRY}"
        AWS_REGION = "${params.AWS_REGION}"
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        
        // Service names
        CUSTOMER_SERVICE = 'customer-service'
        ORDER_SERVICE = 'order-service'
        PRODUCT_SERVICE = 'product-service'
        FRONTEND_SERVICE = 'frontend'
        
        // Build information
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        GIT_COMMIT = "${env.GIT_COMMIT}"
        GIT_BRANCH = "${env.GIT_BRANCH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Checking out branch: ${params.BRANCH_NAME}"
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'Setting up build environment...'
                sh '''
                    # Install dependencies if needed
                    python3 --version
                    pip3 --version
                    docker --version
                    docker-compose --version
                '''
            }
        }
        
        stage('Lint and Code Quality') {
            parallel {
                stage('Backend Linting') {
                    steps {
                        dir('backend') {
                            script {
                                def services = ['customer_service', 'order_service', 'product_service']
                                for (service in services) {
                                    echo "Linting ${service}..."
                                    dir(service) {
                                        sh '''
                                            pip3 install -r requirements-dev.txt
                                            flake8 app/ --max-line-length=88 --extend-ignore=E203
                                            black --check app/
                                        '''
                                    }
                                }
                            }
                        }
                    }
                }
                
                stage('Frontend Linting') {
                    steps {
                        dir('frontend') {
                            echo 'Checking frontend code quality...'
                            sh '''
                                # Add frontend linting commands here if using Node.js/npm
                                echo "Frontend linting placeholder"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            parallel {
                stage('Customer Service Tests') {
                    steps {
                        dir('backend/customer_service') {
                            echo 'Running Customer Service tests...'
                            sh '''
                                pip3 install -r requirements-dev.txt
                                python3 -m pytest tests/ -v --junitxml=test-results.xml --cov=app --cov-report=xml
                            '''
                            publishTestResults testResultsPattern: 'test-results.xml'
                            publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        }
                    }
                }
                
                stage('Order Service Tests') {
                    steps {
                        dir('backend/order_service') {
                            echo 'Running Order Service tests...'
                            sh '''
                                pip3 install -r requirements-dev.txt
                                python3 -m pytest tests/ -v --junitxml=test-results.xml --cov=app --cov-report=xml
                            '''
                            publishTestResults testResultsPattern: 'test-results.xml'
                            publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        }
                    }
                }
                
                stage('Product Service Tests') {
                    steps {
                        dir('backend/product_service') {
                            echo 'Running Product Service tests...'
                            sh '''
                                pip3 install -r requirements-dev.txt
                                python3 -m pytest tests/ -v --junitxml=test-results.xml --cov=app --cov-report=xml
                            '''
                            publishTestResults testResultsPattern: 'test-results.xml'
                            publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Customer Service') {
                    steps {
                        dir('backend/customer_service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/${CUSTOMER_SERVICE}:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS}") {
                                    image.push("${BUILD_NUMBER}")
                                    image.push("latest")
                                }
                            }
                        }
                    }
                }
                
                stage('Build Order Service') {
                    steps {
                        dir('backend/order_service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/${ORDER_SERVICE}:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS}") {
                                    image.push("${BUILD_NUMBER}")
                                    image.push("latest")
                                }
                            }
                        }
                    }
                }
                
                stage('Build Product Service') {
                    steps {
                        dir('backend/product_service') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/${PRODUCT_SERVICE}:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS}") {
                                    image.push("${BUILD_NUMBER}")
                                    image.push("latest")
                                }
                            }
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        dir('frontend') {
                            script {
                                def image = docker.build("${DOCKER_REGISTRY}/${FRONTEND_SERVICE}:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS}") {
                                    image.push("${BUILD_NUMBER}")
                                    image.push("latest")
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'Running security scans...'
                script {
                    def services = ['customer-service', 'order-service', 'product-service', 'frontend']
                    for (service in services) {
                        sh """
                            # Scan Docker images for vulnerabilities
                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                                -v \$(pwd):/workspace \\
                                aquasec/trivy image ${DOCKER_REGISTRY}/${service}:${BUILD_NUMBER} || true
                        """
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                sh '''
                    # Start services with docker-compose
                    docker-compose -f docker-compose.yml up -d
                    
                    # Wait for services to be ready
                    sleep 30
                    
                    # Run integration tests
                    # Add your integration test commands here
                    
                    # Cleanup
                    docker-compose -f docker-compose.yml down
                '''
            }
        }
        
        stage('Deploy to Development') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo 'Deploying to development environment...'
                script {
                    // Update Kubernetes manifests with new image tags
                    sh """
                        # Update image tags in Kubernetes manifests
                        sed -i 's|image: .*customer-service:.*|image: ${DOCKER_REGISTRY}/${CUSTOMER_SERVICE}:${BUILD_NUMBER}|g' k8s/customer-service.yaml
                        sed -i 's|image: .*order-service:.*|image: ${DOCKER_REGISTRY}/${ORDER_SERVICE}:${BUILD_NUMBER}|g' k8s/order-service.yaml
                        sed -i 's|image: .*product-service:.*|image: ${DOCKER_REGISTRY}/${PRODUCT_SERVICE}:${BUILD_NUMBER}|g' k8s/product-service.yaml
                        sed -i 's|image: .*frontend:.*|image: ${DOCKER_REGISTRY}/${FRONTEND_SERVICE}:${BUILD_NUMBER}|g' k8s/frontend.yaml
                        
                        # Apply Kubernetes manifests
                        kubectl apply -f k8s/ --namespace=development
                    """
                }
            }
        }
        
        stage('Smoke Tests') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo 'Running smoke tests on deployed application...'
                sh '''
                    # Wait for deployment to complete
                    kubectl rollout status deployment/customer-service --namespace=development --timeout=300s
                    kubectl rollout status deployment/order-service --namespace=development --timeout=300s
                    kubectl rollout status deployment/product-service --namespace=development --timeout=300s
                    kubectl rollout status deployment/frontend --namespace=development --timeout=300s
                    
                    # Run smoke tests
                    # Add your smoke test commands here
                    echo "Smoke tests completed successfully"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh '''
                # Clean up Docker images to save space
                docker system prune -f
            '''
            
            // Archive artifacts
            archiveArtifacts artifacts: '**/test-results.xml', fingerprint: true, allowEmptyArchive: true
            archiveArtifacts artifacts: '**/coverage.xml', fingerprint: true, allowEmptyArchive: true
        }
        
        success {
            echo 'Pipeline completed successfully!'
            script {
                if (env.BRANCH_NAME == 'main') {
                    // Send success notification
                    slackSend(
                        channel: '#deployments',
                        color: 'good',
                        message: "✅ Build #${BUILD_NUMBER} succeeded for branch ${GIT_BRANCH}\\n" +
                                "Commit: ${GIT_COMMIT_SHORT}\\n" +
                                "Docker images tagged: ${BUILD_NUMBER}"
                    )
                }
            }
        }
        
        failure {
            echo 'Pipeline failed!'
            script {
                // Send failure notification
                slackSend(
                    channel: '#deployments',
                    color: 'danger',
                    message: "❌ Build #${BUILD_NUMBER} failed for branch ${GIT_BRANCH}\\n" +
                            "Commit: ${GIT_COMMIT_SHORT}\\n" +
                            "Check: ${BUILD_URL}"
                )
            }
        }
        
        unstable {
            echo 'Pipeline is unstable!'
            script {
                // Send warning notification
                slackSend(
                    channel: '#deployments',
                    color: 'warning',
                    message: "⚠️ Build #${BUILD_NUMBER} is unstable for branch ${GIT_BRANCH}\\n" +
                            "Commit: ${GIT_COMMIT_SHORT}\\n" +
                            "Check: ${BUILD_URL}"
                )
            }
        }
    }
}