pipeline {
    agent any
    environment {
        ACR_LOGIN_SERVER = credentials('ACR_LOGIN_SERVER') // ID you set in Jenkins
        SNYK_TOKEN = credentials('SNYK_TOKEN') // Snyk authentication token
        // Database configuration for tests
        POSTGRES_HOST = 'localhost'
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        PATH = "/usr/local/bin:$PATH"
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'testing', description: 'Branch to build')
    }

    stages {
        stage('Checkout & Setup') {
            steps {
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/BangMach/bang-sit722-hd.git'
                
                // Cache dependencies
                sh '''
                    python3 --version
                    pip3 --version
                    docker-compose --version
                    
                    # Create cache directories
                    mkdir -p ~/.npm ~/.cache/pip
                '''
            }
        }
        
        stage('Start Databases') {
            steps {
                sh '''
                    docker-compose up -d product_db order_db customer_db 
                    sleep 20 # Wait for DBs to be healthy
                '''
            }
        }
        
        stage('Install Python Dependencies') {
            steps {
                sh '''
                    pip3 install --upgrade pip
                    # Install dependencies in parallel using background processes
                    for req in backend/*/requirements.txt; do
                        pip3 install -r "$req" &
                    done
                    wait
                    pip3 install pytest httpx
                '''
            }
        }

        stage('Test Services in Parallel') {
            parallel {
                stage('Product Service Tests') {
                    steps {
                        sh '''
                            cd backend/product_service
                            python3 -m pytest tests --maxfail=1 --disable-warnings -q --junitxml=test-results.xml
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'backend/product_service/test-results.xml', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Order Service Tests') {
                    steps {
                        sh '''
                            cd backend/order_service
                            python3 -m pytest tests --maxfail=1 --disable-warnings -q --junitxml=test-results.xml
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'backend/order_service/test-results.xml', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Customer Service Tests') {
                    steps {
                        sh '''
                            cd backend/customer_service
                            python3 -m pytest tests --maxfail=1 --disable-warnings -q --junitxml=test-results.xml
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'backend/customer_service/test-results.xml', allowEmptyArchive: true
                        }
                    }
                }
                
                stage('Frontend Tests') {
                    steps {
                        script {
                            sh '''
                                cd frontend
                                npm install
                                npm test -- --coverage --watchAll=false --maxWorkers=2
                            '''
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'frontend/coverage/junit.xml', allowEmptyArchive: true
                            archiveArtifacts artifacts: 'frontend/coverage/lcov-report/**', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Frontend Tests and Security Scan') {
            steps {
                script {
                    // Install Node.js if not available
                    sh '''
                        # Check if Node.js is available, install if not
                        if ! command -v node &> /dev/null; then
                            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                            sudo apt-get install -y nodejs
                        fi
                        node --version
                        npm --version
                    '''
                    
                    // Install frontend dependencies
                    sh '''
                        cd frontend
                        npm install
                    '''
                    
                    // Run frontend unit tests
                    sh '''
                        cd frontend
                        npm test -- --coverage --watchAll=false
                    '''
                    
                    // Run Snyk security scanning
                    sh '''
                        cd frontend
                        # Install Snyk globally if not available
                        if ! command -v snyk &> /dev/null; then
                            npm install -g snyk
                        fi
                        
                        # Authenticate with Snyk (you need to set SNYK_TOKEN as Jenkins credential)
                        snyk auth $SNYK_TOKEN || echo "Snyk auth failed - continuing without auth"
                        
                        # Test for vulnerabilities
                        snyk test --severity-threshold=high || echo "Snyk found vulnerabilities"
                        
                        # Test for code quality issues
                        snyk code test || echo "Snyk code analysis completed"
                        
                        # Monitor project (optional - for continuous monitoring)
                        snyk monitor || echo "Snyk monitoring setup failed"
                    '''
                }
            }
            post {
                always {
                    // Archive test results and coverage reports
                    archiveArtifacts artifacts: 'frontend/coverage/junit.xml', allowEmptyArchive: true
                    archiveArtifacts artifacts: 'frontend/coverage/lcov-report/**', allowEmptyArchive: true
                }
            }
        }

        stage('Azure Login') {
            steps {
                withCredentials([file(credentialsId: 'AZURE_CREDENTIALS', variable: 'AZURE_CREDENTIALS')]) {
                    sh '''
                        export PATH=$PATH:/usr/local/bin
                        AZURE_CREDENTIAL=$(cat $AZURE_CREDENTIALS)
                        CLIENT_ID=$(echo $AZURE_CREDENTIAL | jq -r .clientId)
                        CLIENT_SECRET=$(echo $AZURE_CREDENTIAL | jq -r .clientSecret)
                        TENANT_ID=$(echo $AZURE_CREDENTIAL | jq -r .tenantId)
                        SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIAL | jq -r .subscriptionId)
                        az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }


        stage('ACR Login') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    az acr login --name $ACR_LOGIN_SERVER
                '''
            }
        }

        stage('Build and Push Docker Images') {
            when {
                // Only run if all previous stages passed
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            parallel {
                stage('Build Product Service') {
                    steps {
                        script {
                            sh '''
                                cd backend/product_service
                                docker build -t $ACR_LOGIN_SERVER/product_service:${BUILD_NUMBER} .
                                docker build -t $ACR_LOGIN_SERVER/product_service:latest .
                                
                                # Scan Docker image with Snyk (optional)
                                snyk container test $ACR_LOGIN_SERVER/product_service:${BUILD_NUMBER} --severity-threshold=high || echo "Docker image vulnerabilities found"
                                
                                # Push images
                                docker push $ACR_LOGIN_SERVER/product_service:${BUILD_NUMBER}
                                docker push $ACR_LOGIN_SERVER/product_service:latest
                            '''
                        }
                    }
                }
                
                stage('Build Order Service') {
                    steps {
                        script {
                            sh '''
                                cd backend/order_service
                                docker build -t $ACR_LOGIN_SERVER/order_service:${BUILD_NUMBER} .
                                docker build -t $ACR_LOGIN_SERVER/order_service:latest .
                                
                                # Scan Docker image with Snyk
                                snyk container test $ACR_LOGIN_SERVER/order_service:${BUILD_NUMBER} --severity-threshold=high || echo "Docker image vulnerabilities found"
                                
                                # Push images
                                docker push $ACR_LOGIN_SERVER/order_service:${BUILD_NUMBER}
                                docker push $ACR_LOGIN_SERVER/order_service:latest
                            '''
                        }
                    }
                }
                
                stage('Build Customer Service') {
                    steps {
                        script {
                            sh '''
                                cd backend/customer_service
                                docker build -t $ACR_LOGIN_SERVER/customer_service:${BUILD_NUMBER} .
                                docker build -t $ACR_LOGIN_SERVER/customer_service:latest .
                                
                                # Scan Docker image with Snyk
                                snyk container test $ACR_LOGIN_SERVER/customer_service:${BUILD_NUMBER} --severity-threshold=high || echo "Docker image vulnerabilities found"
                                
                                # Push images
                                docker push $ACR_LOGIN_SERVER/customer_service:${BUILD_NUMBER}
                                docker push $ACR_LOGIN_SERVER/customer_service:latest
                            '''
                        }
                    }
                }
                
                stage('Build Frontend') {
                    steps {
                        script {
                            sh '''
                                cd frontend
                                docker build -t $ACR_LOGIN_SERVER/frontend:${BUILD_NUMBER} .
                                docker build -t $ACR_LOGIN_SERVER/frontend:latest .
                                
                                # Scan Docker image with Snyk
                                snyk container test $ACR_LOGIN_SERVER/frontend:${BUILD_NUMBER} --severity-threshold=high || echo "Docker image vulnerabilities found"
                                
                                # Push images
                                docker push $ACR_LOGIN_SERVER/frontend:${BUILD_NUMBER}
                                docker push $ACR_LOGIN_SERVER/frontend:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    docker-compose down
                '''
            }
        }
        // ...other stages (build, push, deploy, etc.)
    }
    post {
        success {
            echo '🎉 CI pipeline completed successfully!'
            // Trigger CD pipeline (adjust job name if needed)
            build job: 'CD-pipeline', 
                parameters: [
                    string(name: 'BRANCH', value: "${params.BRANCH_NAME}"),
                    string(name: 'IMAGE_TAG', value: "${BUILD_NUMBER}"),
                    string(name: 'ENVIRONMENT', value: 'staging')
                ],
                wait: false
        }
    }
}