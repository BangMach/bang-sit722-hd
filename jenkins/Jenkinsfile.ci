pipeline {
    agent any
    environment {
        ACR_LOGIN_SERVER = credentials('ACR_LOGIN_SERVER') // ID you set in Jenkins
        // Database configuration for tests
        POSTGRES_HOST = 'localhost'
        POSTGRES_USER = 'postgres'
        POSTGRES_PASSWORD = 'postgres'
        PATH = "/usr/local/bin:$PATH"
        
        
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'testing', description: 'Branch to build')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/BangMach/8.2CDevSecOps3.git'
            }
        }
        
        stage('Install Tools') {
            steps {
            sh '''
                python3 --version
                pip3 --version
                docker-compose --version
            '''
            }
        }
        
        stage('Start Databases') {
            steps {
                sh '''
                    docker-compose up -d product_db order_db customer_db
                    sleep 20 # Wait for DBs to be healthy
                '''
            }
        }
        
        stage('Install Python Dependencies') {
            steps {
                sh '''
                    pip3 install --upgrade pip
                    for req in backend/*/requirements.txt; do
                        pip3 install -r "$req"
                    done
                    pip3 install pytest httpx
                '''
            }
        }

        stage('Run Tests: Product Service') {
            steps {
                sh '''
                    export PATH=$PATH:~/.local/bin:/usr/local/bin
                    cd backend/product_service
                    python3 -m pytest tests --maxfail=1 --disable-warnings -q
                '''
            }
        }
                stage('Run Tests: Order Service') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    cd backend/order_service
                    python3 -m pytest tests --maxfail=1 --disable-warnings -q
                '''
            }
        }
        stage('Run Tests: Customer Service') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    cd backend/customer_service
                    python3 -m pytest tests --maxfail=1 --disable-warnings -q
                '''
            }
        }

        

        stage('Azure Login') {
            steps {
                withCredentials([file(credentialsId: 'AZURE_CREDENTIALS', variable: 'AZURE_CREDENTIALS')]) {
                    sh '''
                        export PATH=$PATH:/usr/local/bin
                        az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID
                        az account set --subscription $SUBSCRIPTION_ID
                    '''
                }
            }
        }


        stage('ACR Login') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    az acr login --name $ACR_LOGIN_SERVER
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                    export PATH=$PATH:/usr/local/bin
                    docker-compose down
                '''
            }
        }
        // ...other stages (build, push, deploy, etc.)
    }
}